// Code generated by counterfeiter. DO NOT EDIT.
package clientToolsfakes

import (
	"sync"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/marchmiel/proto-playground/client/clientTools"
)

type FakePubSubConnector struct {
	SendReservationStub        func(*message.Message) (<-chan *message.Message, error)
	sendReservationMutex       sync.RWMutex
	sendReservationArgsForCall []struct {
		arg1 *message.Message
	}
	sendReservationReturns struct {
		result1 <-chan *message.Message
		result2 error
	}
	sendReservationReturnsOnCall map[int]struct {
		result1 <-chan *message.Message
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePubSubConnector) SendReservation(arg1 *message.Message) (<-chan *message.Message, error) {
	fake.sendReservationMutex.Lock()
	ret, specificReturn := fake.sendReservationReturnsOnCall[len(fake.sendReservationArgsForCall)]
	fake.sendReservationArgsForCall = append(fake.sendReservationArgsForCall, struct {
		arg1 *message.Message
	}{arg1})
	fake.recordInvocation("SendReservation", []interface{}{arg1})
	fake.sendReservationMutex.Unlock()
	if fake.SendReservationStub != nil {
		return fake.SendReservationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sendReservationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePubSubConnector) SendReservationCallCount() int {
	fake.sendReservationMutex.RLock()
	defer fake.sendReservationMutex.RUnlock()
	return len(fake.sendReservationArgsForCall)
}

func (fake *FakePubSubConnector) SendReservationCalls(stub func(*message.Message) (<-chan *message.Message, error)) {
	fake.sendReservationMutex.Lock()
	defer fake.sendReservationMutex.Unlock()
	fake.SendReservationStub = stub
}

func (fake *FakePubSubConnector) SendReservationArgsForCall(i int) *message.Message {
	fake.sendReservationMutex.RLock()
	defer fake.sendReservationMutex.RUnlock()
	argsForCall := fake.sendReservationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePubSubConnector) SendReservationReturns(result1 <-chan *message.Message, result2 error) {
	fake.sendReservationMutex.Lock()
	defer fake.sendReservationMutex.Unlock()
	fake.SendReservationStub = nil
	fake.sendReservationReturns = struct {
		result1 <-chan *message.Message
		result2 error
	}{result1, result2}
}

func (fake *FakePubSubConnector) SendReservationReturnsOnCall(i int, result1 <-chan *message.Message, result2 error) {
	fake.sendReservationMutex.Lock()
	defer fake.sendReservationMutex.Unlock()
	fake.SendReservationStub = nil
	if fake.sendReservationReturnsOnCall == nil {
		fake.sendReservationReturnsOnCall = make(map[int]struct {
			result1 <-chan *message.Message
			result2 error
		})
	}
	fake.sendReservationReturnsOnCall[i] = struct {
		result1 <-chan *message.Message
		result2 error
	}{result1, result2}
}

func (fake *FakePubSubConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendReservationMutex.RLock()
	defer fake.sendReservationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePubSubConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clientTools.PubSubConnector = new(FakePubSubConnector)

// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/marchmiel/proto-playground/client/model"
)

type FakeTripBooker struct {
	BookTripStub        func(*model.BookTripRequest) (*model.TripBookedResponse, error)
	bookTripMutex       sync.RWMutex
	bookTripArgsForCall []struct {
		arg1 *model.BookTripRequest
	}
	bookTripReturns struct {
		result1 *model.TripBookedResponse
		result2 error
	}
	bookTripReturnsOnCall map[int]struct {
		result1 *model.TripBookedResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTripBooker) BookTrip(arg1 *model.BookTripRequest) (*model.TripBookedResponse, error) {
	fake.bookTripMutex.Lock()
	ret, specificReturn := fake.bookTripReturnsOnCall[len(fake.bookTripArgsForCall)]
	fake.bookTripArgsForCall = append(fake.bookTripArgsForCall, struct {
		arg1 *model.BookTripRequest
	}{arg1})
	fake.recordInvocation("BookTrip", []interface{}{arg1})
	fake.bookTripMutex.Unlock()
	if fake.BookTripStub != nil {
		return fake.BookTripStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.bookTripReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTripBooker) BookTripCallCount() int {
	fake.bookTripMutex.RLock()
	defer fake.bookTripMutex.RUnlock()
	return len(fake.bookTripArgsForCall)
}

func (fake *FakeTripBooker) BookTripCalls(stub func(*model.BookTripRequest) (*model.TripBookedResponse, error)) {
	fake.bookTripMutex.Lock()
	defer fake.bookTripMutex.Unlock()
	fake.BookTripStub = stub
}

func (fake *FakeTripBooker) BookTripArgsForCall(i int) *model.BookTripRequest {
	fake.bookTripMutex.RLock()
	defer fake.bookTripMutex.RUnlock()
	argsForCall := fake.bookTripArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTripBooker) BookTripReturns(result1 *model.TripBookedResponse, result2 error) {
	fake.bookTripMutex.Lock()
	defer fake.bookTripMutex.Unlock()
	fake.BookTripStub = nil
	fake.bookTripReturns = struct {
		result1 *model.TripBookedResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTripBooker) BookTripReturnsOnCall(i int, result1 *model.TripBookedResponse, result2 error) {
	fake.bookTripMutex.Lock()
	defer fake.bookTripMutex.Unlock()
	fake.BookTripStub = nil
	if fake.bookTripReturnsOnCall == nil {
		fake.bookTripReturnsOnCall = make(map[int]struct {
			result1 *model.TripBookedResponse
			result2 error
		})
	}
	fake.bookTripReturnsOnCall[i] = struct {
		result1 *model.TripBookedResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTripBooker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bookTripMutex.RLock()
	defer fake.bookTripMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTripBooker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.TripBooker = new(FakeTripBooker)

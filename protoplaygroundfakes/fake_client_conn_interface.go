// Code generated by counterfeiter. DO NOT EDIT.
package protoplaygroundfakes

import (
	"context"
	"sync"

	"google.golang.org/grpc"
)

type FakeClientConnInterface struct {
	InvokeStub        func(context.Context, string, interface{}, interface{}, ...grpc.CallOption) error
	invokeMutex       sync.RWMutex
	invokeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
		arg5 []grpc.CallOption
	}
	invokeReturns struct {
		result1 error
	}
	invokeReturnsOnCall map[int]struct {
		result1 error
	}
	NewStreamStub        func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)
	newStreamMutex       sync.RWMutex
	newStreamArgsForCall []struct {
		arg1 context.Context
		arg2 *grpc.StreamDesc
		arg3 string
		arg4 []grpc.CallOption
	}
	newStreamReturns struct {
		result1 grpc.ClientStream
		result2 error
	}
	newStreamReturnsOnCall map[int]struct {
		result1 grpc.ClientStream
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientConnInterface) Invoke(arg1 context.Context, arg2 string, arg3 interface{}, arg4 interface{}, arg5 ...grpc.CallOption) error {
	fake.invokeMutex.Lock()
	ret, specificReturn := fake.invokeReturnsOnCall[len(fake.invokeArgsForCall)]
	fake.invokeArgsForCall = append(fake.invokeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
		arg5 []grpc.CallOption
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Invoke", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.invokeMutex.Unlock()
	if fake.InvokeStub != nil {
		return fake.InvokeStub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.invokeReturns
	return fakeReturns.result1
}

func (fake *FakeClientConnInterface) InvokeCallCount() int {
	fake.invokeMutex.RLock()
	defer fake.invokeMutex.RUnlock()
	return len(fake.invokeArgsForCall)
}

func (fake *FakeClientConnInterface) InvokeCalls(stub func(context.Context, string, interface{}, interface{}, ...grpc.CallOption) error) {
	fake.invokeMutex.Lock()
	defer fake.invokeMutex.Unlock()
	fake.InvokeStub = stub
}

func (fake *FakeClientConnInterface) InvokeArgsForCall(i int) (context.Context, string, interface{}, interface{}, []grpc.CallOption) {
	fake.invokeMutex.RLock()
	defer fake.invokeMutex.RUnlock()
	argsForCall := fake.invokeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeClientConnInterface) InvokeReturns(result1 error) {
	fake.invokeMutex.Lock()
	defer fake.invokeMutex.Unlock()
	fake.InvokeStub = nil
	fake.invokeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientConnInterface) InvokeReturnsOnCall(i int, result1 error) {
	fake.invokeMutex.Lock()
	defer fake.invokeMutex.Unlock()
	fake.InvokeStub = nil
	if fake.invokeReturnsOnCall == nil {
		fake.invokeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.invokeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientConnInterface) NewStream(arg1 context.Context, arg2 *grpc.StreamDesc, arg3 string, arg4 ...grpc.CallOption) (grpc.ClientStream, error) {
	fake.newStreamMutex.Lock()
	ret, specificReturn := fake.newStreamReturnsOnCall[len(fake.newStreamArgsForCall)]
	fake.newStreamArgsForCall = append(fake.newStreamArgsForCall, struct {
		arg1 context.Context
		arg2 *grpc.StreamDesc
		arg3 string
		arg4 []grpc.CallOption
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("NewStream", []interface{}{arg1, arg2, arg3, arg4})
	fake.newStreamMutex.Unlock()
	if fake.NewStreamStub != nil {
		return fake.NewStreamStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newStreamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientConnInterface) NewStreamCallCount() int {
	fake.newStreamMutex.RLock()
	defer fake.newStreamMutex.RUnlock()
	return len(fake.newStreamArgsForCall)
}

func (fake *FakeClientConnInterface) NewStreamCalls(stub func(context.Context, *grpc.StreamDesc, string, ...grpc.CallOption) (grpc.ClientStream, error)) {
	fake.newStreamMutex.Lock()
	defer fake.newStreamMutex.Unlock()
	fake.NewStreamStub = stub
}

func (fake *FakeClientConnInterface) NewStreamArgsForCall(i int) (context.Context, *grpc.StreamDesc, string, []grpc.CallOption) {
	fake.newStreamMutex.RLock()
	defer fake.newStreamMutex.RUnlock()
	argsForCall := fake.newStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClientConnInterface) NewStreamReturns(result1 grpc.ClientStream, result2 error) {
	fake.newStreamMutex.Lock()
	defer fake.newStreamMutex.Unlock()
	fake.NewStreamStub = nil
	fake.newStreamReturns = struct {
		result1 grpc.ClientStream
		result2 error
	}{result1, result2}
}

func (fake *FakeClientConnInterface) NewStreamReturnsOnCall(i int, result1 grpc.ClientStream, result2 error) {
	fake.newStreamMutex.Lock()
	defer fake.newStreamMutex.Unlock()
	fake.NewStreamStub = nil
	if fake.newStreamReturnsOnCall == nil {
		fake.newStreamReturnsOnCall = make(map[int]struct {
			result1 grpc.ClientStream
			result2 error
		})
	}
	fake.newStreamReturnsOnCall[i] = struct {
		result1 grpc.ClientStream
		result2 error
	}{result1, result2}
}

func (fake *FakeClientConnInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.invokeMutex.RLock()
	defer fake.invokeMutex.RUnlock()
	fake.newStreamMutex.RLock()
	defer fake.newStreamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientConnInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ grpc.ClientConnInterface = new(FakeClientConnInterface)

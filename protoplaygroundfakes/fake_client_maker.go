// Code generated by counterfeiter. DO NOT EDIT.
package protoplaygroundfakes

import (
	"sync"

	"github.com/marchmiel/proto-playground/clientTools"
	"github.com/marchmiel/proto-playground/proto"
	"google.golang.org/grpc"
)

type FakeClientMaker struct {
	MakeClientStub        func() (proto.ReservationServiceClient, *grpc.ClientConn, error)
	makeClientMutex       sync.RWMutex
	makeClientArgsForCall []struct {
	}
	makeClientReturns struct {
		result1 proto.ReservationServiceClient
		result2 *grpc.ClientConn
		result3 error
	}
	makeClientReturnsOnCall map[int]struct {
		result1 proto.ReservationServiceClient
		result2 *grpc.ClientConn
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientMaker) MakeClient() (proto.ReservationServiceClient, *grpc.ClientConn, error) {
	fake.makeClientMutex.Lock()
	ret, specificReturn := fake.makeClientReturnsOnCall[len(fake.makeClientArgsForCall)]
	fake.makeClientArgsForCall = append(fake.makeClientArgsForCall, struct {
	}{})
	fake.recordInvocation("MakeClient", []interface{}{})
	fake.makeClientMutex.Unlock()
	if fake.MakeClientStub != nil {
		return fake.MakeClientStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.makeClientReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClientMaker) MakeClientCallCount() int {
	fake.makeClientMutex.RLock()
	defer fake.makeClientMutex.RUnlock()
	return len(fake.makeClientArgsForCall)
}

func (fake *FakeClientMaker) MakeClientCalls(stub func() (proto.ReservationServiceClient, *grpc.ClientConn, error)) {
	fake.makeClientMutex.Lock()
	defer fake.makeClientMutex.Unlock()
	fake.MakeClientStub = stub
}

func (fake *FakeClientMaker) MakeClientReturns(result1 proto.ReservationServiceClient, result2 *grpc.ClientConn, result3 error) {
	fake.makeClientMutex.Lock()
	defer fake.makeClientMutex.Unlock()
	fake.MakeClientStub = nil
	fake.makeClientReturns = struct {
		result1 proto.ReservationServiceClient
		result2 *grpc.ClientConn
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientMaker) MakeClientReturnsOnCall(i int, result1 proto.ReservationServiceClient, result2 *grpc.ClientConn, result3 error) {
	fake.makeClientMutex.Lock()
	defer fake.makeClientMutex.Unlock()
	fake.MakeClientStub = nil
	if fake.makeClientReturnsOnCall == nil {
		fake.makeClientReturnsOnCall = make(map[int]struct {
			result1 proto.ReservationServiceClient
			result2 *grpc.ClientConn
			result3 error
		})
	}
	fake.makeClientReturnsOnCall[i] = struct {
		result1 proto.ReservationServiceClient
		result2 *grpc.ClientConn
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClientMaker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeClientMutex.RLock()
	defer fake.makeClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientMaker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clientTools.ClientMaker = new(FakeClientMaker)
